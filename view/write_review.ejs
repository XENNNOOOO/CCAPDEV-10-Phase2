<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Submit Review</title>
  <script src="https://kit.fontawesome.com/e9d3d528d3.js" crossorigin="anonymous"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/write_review_style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body>
  <!-- Sidebar -->
  <div class="sidebar">
    <div class="logo">
        <img src="/images/logo.png" alt="Bloemen Bites Logo">
      </div>
      <div class="navigation">
        <!-- need pa ifix -->       
        <a href="/<%=loggedUserEmail %>/customer-home-feed">   
          <i class="fa-solid fa-magnifying-glass" style="color: #003399;"></i>
          <p>Search</p>
        </a>
        <a onclick="window.location.href='/search_username';">
          <i class="fa-solid fa-star" style="color: #003399;"></i>
          <p>Reviewers</p>
        </a>
        <a onclick= "window.location.href='/customer/<%=loggedUserEmail %>/updateProfile';">
          <i class="fa-solid fa-user" style="color: #003399;"></i>
          <p>Profile</p>
        </a>
        <a onclick="window.location.href='/suli';">
          <i class="fa-solid fa-arrow-right-from-bracket" style="color: #fc6467;"></i>
          <p>Logout</p>
        </a>
      </div>
  </div>
  
  <!-- Main Content Area --> 
<div class="content">
  <div class="profile-section">
    <!-- Profile Photo and Button -->
    <div class="profile-photo-section">
      <img src="/profile-pics/<%= restaurant._id %>" alt="Restaurant Profile Picture">
     
     
    </div>  

    <!-- Profile Details -->
    <div class="profile-details">
        <h2 id="user-name"><%= restaurant.restoName %></h2>
        <p id="user-email"><%= restaurant.location %></p>
        <div class="tags">
          <% 
          let tagsArray = Array.isArray(restaurant.tags) ? restaurant.tags : restaurant.tags.split(",").map(tag => tag.trim());
          tagsArray.forEach(tag => { 
          %>
              <span class="tag"><%= tag %></span>
          <% }); %>
      </div>
      <div class="description">
        <p id="user-description" ><%= restaurant.description %></p>
    </div>
      <!-- Rating Section -->
    <div class="rating">
      <div id="rating-stars"></div> <!-- Stars will be dynamically inserted -->
      <span id="rating-number"></span> <!-- Rating number will be dynamically updated -->
    </div>
      <p >
        <span><%= restaurant.phone %></span> | 
        <span><%= restaurant._id %></span>
      </p>
    </div>
  </div>
    <!-- review input area -->
 

<form id="reviewForm" class="review-container">
    <label for="title">Title:</label>
    <input type="text" id="title" name="title" placeholder="Enter your review title" class="review-title">

    <label for="review">Review:</label>
    <textarea id="review" name="review" class="review-textarea" placeholder="Write your review here..."></textarea>

    <label for="media">Upload Media:</label>
    <input type="file" id="media" name="media" multiple accept="image/*, video/*">

    <div id="mediaPreview" class="media-preview">
      
    </div>

    <label>Rating:</label>
    <div class="rating" id="rating">
        <span class="star" data-value="1">&#9733;</span>
        <span class="star" data-value="2">&#9733;</span>
        <span class="star" data-value="3">&#9733;</span>
        <span class="star" data-value="4">&#9733;</span>
        <span class="star" data-value="5">&#9733;</span>
    </div>

    <input type="hidden" id="ratingValue" name="rating" value=""> <!-- Stores the rating value -->
    <input type="hidden" name="customerEmail" value="<%= loggedUserEmail %>"> 
    <input type="hidden" name="restaurantId" value="<%= restaurant._id %>">

    <div class="buttons">
        <button class="return-btn" onclick="history.back()">Return</button>
        <button type="submit" class="post-btn">Post</button>
    </div>
  </form>

  <script src="/js/write_review_script.js"></script>
  <script>

   
    document.addEventListener("DOMContentLoaded", function() {
      displayRating(<%= restaurant.rating %>);
    const restaurantId = "<%= restaurant._id %>"; 
    const customerEmail = "<%= loggedUserEmail %>"; 

    // rating
    document.querySelectorAll(".star").forEach(star => {
        star.addEventListener("click", function() {
            const rating = this.getAttribute("data-value");
            document.getElementById("ratingValue").value = rating;

            document.querySelectorAll(".star").forEach(s => {
                s.style.color = s.getAttribute("data-value") <= rating ? "#FFD700" : "#ccc";
            });
        });
    });

    
    document.getElementById("reviewForm").addEventListener("submit", async function(event) {
    event.preventDefault();

    const formData = new FormData();
    formData.append("title", document.getElementById("title").value);
    formData.append("review", document.getElementById("review").value);
    formData.append("rating", document.getElementById("ratingValue").value);

    
    const files = document.getElementById("media").files;
    [...files].forEach(file => formData.append("media", file));

    try {
        const response = await fetch(`/${customerEmail}/profile/${restaurantId}/write`, {
            method: "POST",
            body: formData, 
        });

        const data = await response.json();
        if (response.ok) {
            alert("Review submitted successfully!");
            window.location.href = `/${customerEmail}/profile/${restaurantId}`; 
        } else {
            alert("Error submitting review: " + data.error);
        }
    } catch (error) {
        console.error("Error:", error);
        alert("An error occurred while submitting the review.");
    }
});

    // convert file to Base64
    function toBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    }

    document.getElementById("media").addEventListener("change", function(event) {
        const previewContainer = document.getElementById("mediaPreview");
        previewContainer.innerHTML = ""; // Clear previous previews

        const files = Array.from(event.target.files);

        if (files.length > 0) {
            files.forEach((file, index) => {
                const fileURL = URL.createObjectURL(file);
                const previewWrapper = document.createElement("div");
                previewWrapper.classList.add("preview-wrapper");

                const previewElement = document.createElement(file.type.startsWith("video") ? "video" : "img");
                previewElement.src = fileURL;
                previewElement.classList.add("preview-item");

                if (file.type.startsWith("video")) {
                    previewElement.controls = true;
                }

                const removeButton = document.createElement("button");
                removeButton.innerHTML = "❌";
                removeButton.classList.add("remove-btn");
                removeButton.addEventListener("click", () => {
                    document.getElementById("media").value = "";
                    previewWrapper.remove();
                });

                previewWrapper.appendChild(previewElement);
                previewWrapper.appendChild(removeButton);
                previewContainer.appendChild(previewWrapper);
            });
        }
    });
});
</script>
  
</body>
</html>